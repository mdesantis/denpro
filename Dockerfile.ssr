# syntax=docker/dockerfile:1
# check=error=true
# hadolint global ignore=DL3008

# This Dockerfile is designed for production, not development. Use with Kamal or build'n'run by hand:
# docker build -t denpro .
# docker run -d -p 80:80 -e RAILS_MASTER_KEY=<value from config/master.key> --name denpro denpro

# For a containerized dev environment, see Dev Containers: https://guides.rubyonrails.org/getting_started_with_devcontainer.html

# Make sure RUBY_VERSION matches the Ruby version in .ruby-version
ARG RUBY_VERSION=3.4.4
ARG NVM_VERSION=0.40.3
ARG NODE_VERSION=22.17.0

FROM docker.io/library/ruby:$RUBY_VERSION-slim AS base

# Rails app lives here
WORKDIR /workdir

# Install base packages
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y curl libjemalloc2 libvips postgresql-client && \
    rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Set production environment
ENV RAILS_ENV="production" \
    BUNDLE_DEPLOYMENT="1" \
    BUNDLE_PATH="/usr/local/bundle" \
    BUNDLE_WITHOUT="development"

# Throw-away build stage to reduce size of final image
FROM base AS build

# Install packages needed to build gems
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y build-essential git libpq-dev pkg-config libyaml-dev && \
    rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Create a script file sourced by both interactive and non-interactive bash shells
ENV BASH_ENV=/root/.bash_env
SHELL ["/bin/bash", "-o", "pipefail", "-c"]
# hadolint ignore=SC2016
RUN touch "${BASH_ENV}" && \
    echo '. "${BASH_ENV}"' >> ~/.bashrc

# Download and install nvm
ARG NVM_VERSION
SHELL ["/bin/bash", "-o", "pipefail", "-c"]
RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v"${NVM_VERSION}"/install.sh | PROFILE="${BASH_ENV}" bash

ARG NODE_VERSION
SHELL ["/bin/bash", "-c"]
RUN nvm install "${NODE_VERSION}" --default --save && \
    nvm use "${NODE_VERSION}" && \
    nvm install-latest-npm

# Install application gems
COPY Gemfile Gemfile.lock ./
RUN bundle install && \
    rm -rf ~/.bundle/ "${BUNDLE_PATH}"/ruby/*/cache "${BUNDLE_PATH}"/ruby/*/bundler/gems/*/.git && \
    bundle exec bootsnap precompile --gemfile

# Precompile bootsnap code for faster boot times
RUN bundle exec bootsnap precompile app/ lib/

COPY package.json package-lock.json ./
RUN npm install

# Copy application code
COPY . .

RUN ./bin/vite build --ssr

ARG NODE_VERSION
FROM docker.io/library/node:$NODE_VERSION-slim

WORKDIR /workdir

COPY --from=build /workdir/public/vite-ssr ./

COPY package.json package-lock.json ./
RUN npm install

ARG GID=10001
ARG UID=10001
RUN groupadd --system --gid "${GID}" runner && \
    useradd runner --create-home --shell /bin/bash --uid "${UID}" --gid "${GID}"
USER runner:runner

ENV NODE_ENV=production

EXPOSE 5173
CMD ["node", "/workdir/ssr.js"]
